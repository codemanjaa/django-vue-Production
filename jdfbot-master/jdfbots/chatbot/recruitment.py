# -*- coding: utf-8 -*-
"""Recruitment chatbot."""

import os
import time

from fbmq import attachment as Attachment

from jdfbots import i18n
from jdfbots.algorithm import fagerstrom
from jdfbots.chatbot import State, Transition
from jdfbots.chatbot.helper import MultipleChoice


class Start(State):
    """Start state."""

    @classmethod
    def on_enter(cls, page, user, prev):
        return cls.on_event(page, user, None)

    @classmethod
    def on_event(cls, page, user, event):
        t = i18n.translator(user)
        page.send(
            user.facebook_id,
            (t("Bienvenue {name}, je suis HELP. üëã", {"name": user.first_name})),
        )
        return Transition.MOVE("recruitment.Welcome")


class Welcome(MultipleChoice):
    """Welcome message."""

    name = "welcome"
    question = "Durant l‚Äôarr√™t, quand tu auras une crise de manque, une envie forte de reprendre une cigarette, je t‚Äôapporterai une solution imm√©diate. Pour cela, j‚Äôai besoin de te conna√Ætre un peu. Merci de r√©pondre √† ces questions."
    buttons = [{"title": "C'est parti!", "payload": "LETS_GO"}]
    next = "recruitment.ButtonsUsage"


class ButtonsUsage(State):
    """Explaining the usage of the buttons."""

    buttons = [
        {"title": "a", "payload": "BUTTONS_A"},
        {"title": "b", "payload": "BUTTONS_B"},
        {"title": "c", "payload": "BUTTONS_C"},
        {"title": "d", "payload": "BUTTONS_D"},
        {"title": "e", "payload": "BUTTONS_E"},
        {"title": "f", "payload": "BUTTONS_F"},
        {"title": "g", "payload": "BUTTONS_G"},
        {"title": "h", "payload": "BUTTONS_H"},
        {"title": "i", "payload": "BUTTONS_I"},
        {"title": "j", "payload": "BUTTONS_J"},
        {"title": "Ok", "payload": "BUTTONS_OK"},
    ]

    @classmethod
    def on_enter(cls, page, user, prev):
        t = i18n.translator(user)
        page.send(
            user.facebook_id,
            t(
                "Avant d'aller plus loin, voil√† une br√®ve explication sur l'utilisation des boutons pour r√©pondre. Il se peut que tous les boutons ne soient pas affich√©s en m√™me temps sur ton √©cran. Pour cela tu peux les faire d√©filer comme illustr√© sur l'image ci-dessous."
            ),
        )
        page.send(
            user.facebook_id,
            Attachment.Image(os.environ["SERVER_URL"] + "/static/buttons.gif"),
        )
        page.send(
            user.facebook_id,
            t(
                "Pour montrer que tu as bien compris, appuie maintenant sur le bouton ¬´Ok¬ª qui se situe √† la fin de la liste des boutons."
            ),
            quick_replies=cls.buttons,
        )
        return Transition.STAY

    @classmethod
    def on_event(cls, page, user, event):
        t = i18n.translator(user)
        # Get the response
        response = event.quick_reply_payload
        # If the answer is not valid
        if not response:
            page.send(
                user.facebook_id,
                t("Il faut que tu r√©pondes en utilisant les boutons!"),
                quick_replies=cls.buttons,
            )
            return Transition.STAY
        if response != "BUTTONS_OK":
            page.send(
                user.facebook_id,
                t("Tu dois cliquer sur le bouton ¬´Ok¬ª"),
                quick_replies=cls.buttons,
            )
            return Transition.STAY
        page.send(
            user.facebook_id,
            t(
                "Voil√†, tu sais maintenant r√©pondre en utilisant les boutons, on peut donc y aller avec les questions."
            ),
        )
        return Transition.MOVE("recruitment.Age")


class Age(MultipleChoice):
    """Age question."""

    name = "age"
    question = "Quel √¢ge as-tu?"
    buttons = [
        {"title": "18‚Äì24", "payload": "AGE_18_24"},
        {"title": "25‚Äì34", "payload": "AGE_25_34"},
        {"title": "35‚Äì44", "payload": "AGE_35_44"},
        {"title": "45‚Äì54", "payload": "AGE_45_54"},
        {"title": "55‚Äì64", "payload": "AGE_55_64"},
        {"title": "65+", "payload": "AGE_65_+"},
    ]
    next = "recruitment.Sex"


class Sex(MultipleChoice):
    """Sex question."""

    name = "sex"
    question = "Tu es:"
    buttons = [
        {"title": "Un homme", "payload": "SEX_M"},
        {"title": "Une femme", "payload": "SEX_W"},
    ]
    next = "recruitment.Job"


class Job(MultipleChoice):
    """Job question."""

    name = "job"
    question = "Si tu exerces actuellement une activit√© professionnelle, est-ce plut√¥t:"
    buttons = [
        {"title": "√Ä l'int√©rieur", "payload": "JOB_INT"},
        {"title": "√Ä l'ext√©rieur", "payload": "JOB_EXT"},
        {"title": "Pas d'activit√© prof.", "payload": "JOB_NO"},
    ]
    next = "recruitment.Dependency"


class Dependency(MultipleChoice):
    """Dependency question."""

    name = "dependency"
    question = "Comment estimes-tu ta d√©pendance √† la cigarette?"
    buttons = [
        {"title": "Faible", "payload": "DEPENDENCY_LOW"},
        {"title": "Mod√©r√©e", "payload": "DEPENDENCY_MEDIUM"},
        {"title": "Forte", "payload": "DEPENDENCY_HIGH"},
        {"title": "Tr√®s forte", "payload": "DEPENDENCY_VERY_HIGH"},
    ]
    next = "recruitment.Try"


class Try(MultipleChoice):
    """Try question."""

    name = "try"
    question = "As-tu d√©j√† tent√© d'arr√™ter de fumer?"
    buttons = [
        {"title": "Non", "payload": "TRY_FIRST"},
        {"title": "Oui, une fois", "payload": "TRY_SECOND"},
        {"title": "Oui, 2 ou 3 fois", "payload": "TRY_THIRD_FOURTH"},
        {"title": "Oui, 4 √† 9 fois", "payload": "TRY_FIFTH_TENTH"},
        {"title": "Oui, plus de 10 fois", "payload": "TRY_ELEVENTH_MORE"},
    ]
    next = "recruitment.FSDelay"


###################
# FAGERSTROM TEST #
###################


class FSDelay(MultipleChoice):
    """Fagerstr√∂m Delay question."""

    name = "fs_delay"
    question = "Le matin, quel est le d√©lai entre ton r√©veil et ta premi√®re cigarette?"
    buttons = [
        {"title": "Moins de 5 minutes", "payload": "FS_DELAY_5-"},
        {"title": "6 √† 30 minutes", "payload": "FS_DELAY_6_30"},
        {"title": "31 √† 60 minutes", "payload": "FS_DELAY_31_60"},
        {"title": "Plus de 60 minutes", "payload": "FS_DELAY_60+"},
    ]
    next = "recruitment.FSForbidden"


class FSForbidden(MultipleChoice):
    """Fagerstr√∂m Forbidden question."""

    name = "fs_forbidden"
    question = (
        "T'es-t'il difficile de t'abstenir de fumer dans les endroits "
        "o√π c'est interdit?"
    )
    buttons = [
        {"title": "Oui", "payload": "FS_FORBIDDEN_YES"},
        {"title": "Non", "payload": "FS_FORBIDDEN_NO"},
    ]
    next = "recruitment.FSDifficult"


class FSDifficult(MultipleChoice):
    """Fagerstr√∂m Difficult question."""

    name = "fs_difficult"
    question = "√Ä quelle cigarette de la journ√©e as-tu le plus de peine √† renoncer?"
    buttons = [
        {"title": "La premi√®re", "payload": "FS_DIFFICULT_FIRST"},
        {"title": "Une autre", "payload": "FS_DIFFICULT_OTHER"},
    ]
    next = "recruitment.FSCount"


class FSCount(MultipleChoice):
    """Fagerstr√∂m Count question."""

    name = "fs_count"
    question = "Combien de cigarettes fumes-tu par jour, en moyenne?"
    buttons = [
        {"title": "1 √† 10", "payload": "FS_COUNT_1_10"},
        {"title": "11 √† 20", "payload": "FS_COUNT_11_20"},
        {"title": "21 √† 30", "payload": "FS_COUNT_21_30"},
        {"title": "Plus de 30", "payload": "FS_COUNT_30+"},
    ]
    next = "recruitment.FSRhythm"


class FSRhythm(MultipleChoice):
    """Fagerstr√∂m Rhythm question."""

    name = "fs_rhythm"
    question = "Fumes-tu √† un rythme plus soutenu le matin que l'apr√®s-midi?"
    buttons = [
        {"title": "Oui", "payload": "FS_RHYTHM_YES"},
        {"title": "Non", "payload": "FS_RHYTHM_NO"},
    ]
    next = "recruitment.FSIll"


class FSIll(MultipleChoice):
    """Fagerstr√∂m Ill question."""

    name = "fs_ill"
    question = "Fumes-tu aussi quand tu es malade au lit toute la journ√©e?"
    buttons = [
        {"title": "Oui", "payload": "FS_ILL_YES"},
        {"title": "Non", "payload": "FS_ILL_NO"},
    ]
    next = "recruitment.Motivation"


##########################
# END¬†OF FAGERSTROM TEST #
##########################


class Motivation(MultipleChoice):
    """Motivation question."""

    name = "motivation"
    question = (
        "Et la derni√®re question concerne ta volont√© d'arr√™ter de fumer.\n"
        "Quel est, √† ce moment, ton degr√© de motivation d'arr√™ter de fumer?"
    )
    buttons = [
        {"title": "Tr√®s faible", "payload": "MOTIVATION_VERY_LOW"},
        {"title": "Faible", "payload": "MOTIVATION_LOW"},
        {"title": "Moyen", "payload": "MOTIVATION_MEDIUM"},
        {"title": "Fort", "payload": "MOTIVATION_HIGH"},
        {"title": "Tr√®s fort", "payload": "MOTIVATION_VERY_HIGH"},
    ]
    next = "recruitment.Result"


class Result(State):
    """Result state."""

    @classmethod
    def on_enter(cls, page, user, prev):
        t = i18n.translator(user)
        with cls.storage(user) as s:
            score = fagerstrom.compute_score(s)
            category = fagerstrom.compute_category(s)
            s["fs_result_score"] = score
            s["fs_result_category"] = category
        page.send(
            user.facebook_id,
            t(
                "Certaines de ces questions font partie du test de Fagerstr√∂m, qui mesure la d√©pendance √† la nicotine. Selon tes r√©ponses tu es dans la cat√©gorie:\n\n\t‚Üí {category}",
                {"category": t(category)},
            ),
        )
        return Transition.MOVE("recruitment.End")


class End(State):
    """End state."""

    @classmethod
    def on_enter(cls, page, user, prev):
        t = i18n.translator(user)
        # page.send(
        #     user.facebook_id,
        #     t(
        #         "Merci d'avoir r√©pondu √† ces questions. Dans quelques jours on va suivre ensemble ta consommation de cigarette pour √©tablir ton profil de fumeur! D'ici l√† reste inform√© en suivant le groupe priv√© Facebook, et si l'envie t'en prends, n'h√©site pas √† partage ton r√©sultat du test de Fagerstr√∂m sur le groupe pour en discuter avec les autres!"
        #     ),
        # )
        # page.send(user.facebook_id, t("√Ä bient√¥t! ü§ó"))
        # return Transition.STAY
        # page.send(
        #     user.facebook_id,
        #     t(
        #         "Merci d'avoir r√©pondu √† ces questions. Dans quelques jours tu "
        #         "vas arr√™ter de fumer et je serai l√† quand tu auras besoin d'un "
        #         "coup de pouce. D'ici l√† reste inform√© en suivant le groupe "
        #         "priv√© Facebook. √Ä bient√¥t! ü§ó"
        #     ),
        # )
        page.send(user.facebook_id, t("Merci d'avoir r√©pondu √† ces questions."))
        time.sleep(4)
        return Transition.MOVE("cessation.Wait")

    @classmethod
    def on_event(cls, page, user, event):
        return Transition.MOVE("cessation.Wait")
        # t = i18n.translator(user)
        # page.send(
        #     user.facebook_id,
        #     t("Encore un peu de patience! La phase suivante n'a pas encore commenc√© üòâ"),
        # )
        # return Transition.STAY
        # page.send(
        #     user.facebook_id,
        #     t(
        #         "Comme tu n'as pas particip√© √† la phase d'enregistrement des "
        #         "cigarettes, je n'ai pas pu √©tablir ton profil de fumeur! Je "
        #         "serai n√©anmoins l√† pour te donner un coup de pouce quand tu "
        #         "en auras besoin lorsque tu arr√™teras de fumer. √Ä bient√¥t! ü§ó"
        #     ),
        # )
        # return Transition.MOVE("cessation.Wait")
